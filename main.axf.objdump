
C:/Users/Andrew/OneDrive/Geneva College/CPE 490/Projects/Lab7/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	4c 07 00 00 58 07 00 00 64 07 00 00 70 07 00 00     L...X...d...p...
  30:	7c 07 00 00 5c 0e 00 00 fc 06 00 00 88 07 00 00     |...\...........

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000347 	bl	df8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000f44 	.word	0x00000f44

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000013a0 	.word	0x000013a0

00000124 <__cs3_heap_start_ptr>:
 124:	000013c8 	.word	0x000013c8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000013a8 	.word	0x000013a8
 170:	000013ab 	.word	0x000013ab
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000013a8 	.word	0x000013a8
 1bc:	000013a8 	.word	0x000013a8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000013a8 	.word	0x000013a8
 200:	00000000 	.word	0x00000000
 204:	00000ee8 	.word	0x00000ee8

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000ee8 	.word	0x00000ee8
 250:	000013ac 	.word	0x000013ac
 254:	00000f48 	.word	0x00000f48
 258:	00000000 	.word	0x00000000

0000025c <main>:
volatile int * ADC_CH0_ptr = (int *) 0xFF204000;
volatile int * ADC_CH1_ptr = (int *) 0xFF204004;
int flag = 0;

int main(void)
{	
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd020 	sub	sp, sp, #32
	int temp = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int count = 0;
 270:	e3a03000 	mov	r3, #0
 274:	e50b3008 	str	r3, [r11, #-8]
	int sample = 0;
 278:	e3a03000 	mov	r3, #0
 27c:	e50b300c 	str	r3, [r11, #-12]
	int value = 0;
 280:	e3a03000 	mov	r3, #0
 284:	e50b3010 	str	r3, [r11, #-16]
	int display = 0;
 288:	e3a03000 	mov	r3, #0
 28c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int divisor = 0;
 290:	e3a03000 	mov	r3, #0
 294:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int index;
	char hex[4] = {'X'};
 298:	e3a03000 	mov	r3, #0
 29c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
 2a0:	e3a03058 	mov	r3, #88	; 0x58
 2a4:	e54b3024 	strb	r3, [r11, #-36]	; 0xffffffdc
	
	disable_A9_interrupts ();	// disable interrupts in the A9 processor
 2a8:	eb000139 	bl	794 <disable_A9_interrupts>
	set_A9_IRQ_stack ();			// initialize the stack pointer for IRQ mode
 2ac:	eb000142 	bl	7bc <set_A9_IRQ_stack>
	config_GIC ();					// configure the general interrupt controller
 2b0:	eb00015d 	bl	82c <config_GIC>
	config_clock ();			// configure the timer
 2b4:	eb0000f5 	bl	690 <config_clock>
	enable_A9_interrupts ();	// enable interrupts in the A9 processor
 2b8:	eb000151 	bl	804 <enable_A9_interrupts>

	*HEX3_HEX0_ptr = 0x00; //Clear LEDs
 2bc:	e3003f60 	movw	r3, #3936	; 0xf60
 2c0:	e3403000 	movt	r3, #0
 2c4:	e5933000 	ldr	r3, [r3]
 2c8:	e3a02000 	mov	r2, #0
 2cc:	e5832000 	str	r2, [r3]
	*ADC_CH1_ptr = 1; //Set to auto update ADC
 2d0:	e3003f68 	movw	r3, #3944	; 0xf68
 2d4:	e3403000 	movt	r3, #0
 2d8:	e5933000 	ldr	r3, [r3]
 2dc:	e3a02001 	mov	r2, #1
 2e0:	e5832000 	str	r2, [r3]
	*TMR_CTRL_ptr = *TMR_CTRL_ptr | 0x1; //enable timer
 2e4:	e3003f58 	movw	r3, #3928	; 0xf58
 2e8:	e3403000 	movt	r3, #0
 2ec:	e5932000 	ldr	r2, [r3]
 2f0:	e3003f58 	movw	r3, #3928	; 0xf58
 2f4:	e3403000 	movt	r3, #0
 2f8:	e5933000 	ldr	r3, [r3]
 2fc:	e5933000 	ldr	r3, [r3]
 300:	e3833001 	orr	r3, r3, #1
 304:	e5823000 	str	r3, [r2]
 308:	ea000000 	b	310 <main+0xb4>
			}
			*HEX3_HEX0_ptr = display;
			sample = 0;
			flag = 0;
		}
	}
 30c:	e1a00000 	nop			; (mov r0, r0)
	*ADC_CH1_ptr = 1; //Set to auto update ADC
	*TMR_CTRL_ptr = *TMR_CTRL_ptr | 0x1; //enable timer
	
	while (1)
	{
		if (flag == 1)
 310:	e30133c4 	movw	r3, #5060	; 0x13c4
 314:	e3403000 	movt	r3, #0
 318:	e5933000 	ldr	r3, [r3]
 31c:	e3530001 	cmp	r3, #1
 320:	1a00000f 	bne	364 <main+0x108>
		{
			flag = 0;
 324:	e30133c4 	movw	r3, #5060	; 0x13c4
 328:	e3403000 	movt	r3, #0
 32c:	e3a02000 	mov	r2, #0
 330:	e5832000 	str	r2, [r3]
			sample = sample + (*ADC_CH0_ptr & 0xFFF);
 334:	e3003f64 	movw	r3, #3940	; 0xf64
 338:	e3403000 	movt	r3, #0
 33c:	e5933000 	ldr	r3, [r3]
 340:	e5933000 	ldr	r3, [r3]
 344:	e1a03a03 	lsl	r3, r3, #20
 348:	e1a03a23 	lsr	r3, r3, #20
 34c:	e51b200c 	ldr	r2, [r11, #-12]
 350:	e0823003 	add	r3, r2, r3
 354:	e50b300c 	str	r3, [r11, #-12]
			count = count + 1;
 358:	e51b3008 	ldr	r3, [r11, #-8]
 35c:	e2833001 	add	r3, r3, #1
 360:	e50b3008 	str	r3, [r11, #-8]
		}
	
		if (count == 1000)
 364:	e51b3008 	ldr	r3, [r11, #-8]
 368:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 36c:	1affffe6 	bne	30c <main+0xb0>
		{
			count = 0; //Clear count
 370:	e3a03000 	mov	r3, #0
 374:	e50b3008 	str	r3, [r11, #-8]
			value = (sample / 1000); //Average the 1000 counts
 378:	e51b200c 	ldr	r2, [r11, #-12]
 37c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
 380:	e3413062 	movt	r3, #4194	; 0x1062
 384:	e0c30293 	smull	r0, r3, r3, r2
 388:	e1a01343 	asr	r1, r3, #6
 38c:	e1a03fc2 	asr	r3, r2, #31
 390:	e0633001 	rsb	r3, r3, r1
 394:	e50b3010 	str	r3, [r11, #-16]
			for (index = 0; index < 4; index++)
 398:	e3a03000 	mov	r3, #0
 39c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
 3a0:	ea000046 	b	4c0 <main+0x264>
			{
				switch (index)
 3a4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 3a8:	e3530003 	cmp	r3, #3
 3ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 3b0:	ea00000f 	b	3f4 <main+0x198>
 3b4:	000003c4 	.word	0x000003c4
 3b8:	000003d0 	.word	0x000003d0
 3bc:	000003dc 	.word	0x000003dc
 3c0:	000003e8 	.word	0x000003e8
				{
					case 0:
						divisor = 1000;
 3c4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
 3c8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
						break;
 3cc:	ea000008 	b	3f4 <main+0x198>
					case 1:
						divisor = 100;
 3d0:	e3a03064 	mov	r3, #100	; 0x64
 3d4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
						break;
 3d8:	ea000005 	b	3f4 <main+0x198>
					case 2:
						divisor = 10;
 3dc:	e3a0300a 	mov	r3, #10
 3e0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
						break;
 3e4:	ea000002 	b	3f4 <main+0x198>
					case 3:
						divisor = 1;
 3e8:	e3a03001 	mov	r3, #1
 3ec:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
						break;
 3f0:	e1a00000 	nop			; (mov r0, r0)
				}
				temp = (value / divisor);
 3f4:	e51b0010 	ldr	r0, [r11, #-16]
 3f8:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
 3fc:	eb00015f 	bl	980 <__aeabi_idiv>
 400:	e1a03000 	mov	r3, r0
 404:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
				value = (value % divisor);
 408:	e51b3010 	ldr	r3, [r11, #-16]
 40c:	e1a00003 	mov	r0, r3
 410:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
 414:	eb0001a3 	bl	aa8 <__aeabi_idivmod>
 418:	e1a03001 	mov	r3, r1
 41c:	e50b3010 	str	r3, [r11, #-16]
				if (flag != 2 && temp == 0 && index < 3)
 420:	e30133c4 	movw	r3, #5060	; 0x13c4
 424:	e3403000 	movt	r3, #0
 428:	e5933000 	ldr	r3, [r3]
 42c:	e3530002 	cmp	r3, #2
 430:	0a00000d 	beq	46c <main+0x210>
 434:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 438:	e3530000 	cmp	r3, #0
 43c:	1a00000a 	bne	46c <main+0x210>
 440:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 444:	e3530002 	cmp	r3, #2
 448:	ca000007 	bgt	46c <main+0x210>
				{
					hex[index] = 0x00;
 44c:	e3e0301f 	mvn	r3, #31
 450:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
 454:	e24b1004 	sub	r1, r11, #4
 458:	e0812002 	add	r2, r1, r2
 45c:	e0823003 	add	r3, r2, r3
 460:	e3a02000 	mov	r2, #0
 464:	e5c32000 	strb	r2, [r3]
 468:	ea000011 	b	4b4 <main+0x258>
				}
				else
				{
					hex[index] = HEX_Lookup(temp + 48);
 46c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 470:	e6ef3073 	uxtb	r3, r3
 474:	e2833030 	add	r3, r3, #48	; 0x30
 478:	e6ef3073 	uxtb	r3, r3
 47c:	e1a00003 	mov	r0, r3
 480:	eb000034 	bl	558 <HEX_Lookup>
 484:	e1a03000 	mov	r3, r0
 488:	e6ef2073 	uxtb	r2, r3
 48c:	e3e0301f 	mvn	r3, #31
 490:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
 494:	e24b0004 	sub	r0, r11, #4
 498:	e0801001 	add	r1, r0, r1
 49c:	e0813003 	add	r3, r1, r3
 4a0:	e5c32000 	strb	r2, [r3]
					flag = 2;
 4a4:	e30133c4 	movw	r3, #5060	; 0x13c4
 4a8:	e3403000 	movt	r3, #0
 4ac:	e3a02002 	mov	r2, #2
 4b0:	e5832000 	str	r2, [r3]
	
		if (count == 1000)
		{
			count = 0; //Clear count
			value = (sample / 1000); //Average the 1000 counts
			for (index = 0; index < 4; index++)
 4b4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 4b8:	e2833001 	add	r3, r3, #1
 4bc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
 4c0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 4c4:	e3530003 	cmp	r3, #3
 4c8:	daffffb5 	ble	3a4 <main+0x148>
					hex[index] = HEX_Lookup(temp + 48);
					flag = 2;
				}
			}
			
			display = 0x0000000;
 4cc:	e3a03000 	mov	r3, #0
 4d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			for (index = 0; index < 4; index++)
 4d4:	e3a03000 	mov	r3, #0
 4d8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
 4dc:	ea00000e 	b	51c <main+0x2c0>
			{
				display = (display << 8);
 4e0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 4e4:	e1a03403 	lsl	r3, r3, #8
 4e8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				display = display | hex[index];
 4ec:	e3e0301f 	mvn	r3, #31
 4f0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
 4f4:	e24b1004 	sub	r1, r11, #4
 4f8:	e0812002 	add	r2, r1, r2
 4fc:	e0823003 	add	r3, r2, r3
 500:	e5d33000 	ldrb	r3, [r3]
 504:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 508:	e1823003 	orr	r3, r2, r3
 50c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					flag = 2;
				}
			}
			
			display = 0x0000000;
			for (index = 0; index < 4; index++)
 510:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 514:	e2833001 	add	r3, r3, #1
 518:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
 51c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 520:	e3530003 	cmp	r3, #3
 524:	daffffed 	ble	4e0 <main+0x284>
			{
				display = (display << 8);
				display = display | hex[index];
			}
			*HEX3_HEX0_ptr = display;
 528:	e3003f60 	movw	r3, #3936	; 0xf60
 52c:	e3403000 	movt	r3, #0
 530:	e5933000 	ldr	r3, [r3]
 534:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 538:	e5832000 	str	r2, [r3]
			sample = 0;
 53c:	e3a03000 	mov	r3, #0
 540:	e50b300c 	str	r3, [r11, #-12]
			flag = 0;
 544:	e30133c4 	movw	r3, #5060	; 0x13c4
 548:	e3403000 	movt	r3, #0
 54c:	e3a02000 	mov	r2, #0
 550:	e5832000 	str	r2, [r3]
		}
	}
 554:	eaffff6c 	b	30c <main+0xb0>

00000558 <HEX_Lookup>:
}

int HEX_Lookup(char c)  //Lookup switch statement
{ 
 558:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 55c:	e28db000 	add	r11, sp, #0
 560:	e24dd00c 	sub	sp, sp, #12
 564:	e1a03000 	mov	r3, r0
 568:	e54b3005 	strb	r3, [r11, #-5]
	switch(c)
 56c:	e55b3005 	ldrb	r3, [r11, #-5]
 570:	e2433030 	sub	r3, r3, #48	; 0x30
 574:	e3530028 	cmp	r3, #40	; 0x28
 578:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 57c:	ea00003e 	b	67c <HEX_Lookup+0x124>
 580:	00000624 	.word	0x00000624
 584:	0000062c 	.word	0x0000062c
 588:	00000634 	.word	0x00000634
 58c:	0000063c 	.word	0x0000063c
 590:	00000644 	.word	0x00000644
 594:	0000064c 	.word	0x0000064c
 598:	00000654 	.word	0x00000654
 59c:	0000065c 	.word	0x0000065c
 5a0:	00000664 	.word	0x00000664
 5a4:	0000066c 	.word	0x0000066c
 5a8:	0000067c 	.word	0x0000067c
 5ac:	0000067c 	.word	0x0000067c
 5b0:	0000067c 	.word	0x0000067c
 5b4:	0000067c 	.word	0x0000067c
 5b8:	0000067c 	.word	0x0000067c
 5bc:	0000067c 	.word	0x0000067c
 5c0:	0000067c 	.word	0x0000067c
 5c4:	0000067c 	.word	0x0000067c
 5c8:	0000067c 	.word	0x0000067c
 5cc:	0000067c 	.word	0x0000067c
 5d0:	0000067c 	.word	0x0000067c
 5d4:	0000067c 	.word	0x0000067c
 5d8:	0000067c 	.word	0x0000067c
 5dc:	0000067c 	.word	0x0000067c
 5e0:	0000067c 	.word	0x0000067c
 5e4:	0000067c 	.word	0x0000067c
 5e8:	0000067c 	.word	0x0000067c
 5ec:	0000067c 	.word	0x0000067c
 5f0:	0000067c 	.word	0x0000067c
 5f4:	0000067c 	.word	0x0000067c
 5f8:	0000067c 	.word	0x0000067c
 5fc:	0000067c 	.word	0x0000067c
 600:	0000067c 	.word	0x0000067c
 604:	0000067c 	.word	0x0000067c
 608:	0000067c 	.word	0x0000067c
 60c:	0000067c 	.word	0x0000067c
 610:	0000067c 	.word	0x0000067c
 614:	0000067c 	.word	0x0000067c
 618:	0000067c 	.word	0x0000067c
 61c:	0000067c 	.word	0x0000067c
 620:	00000674 	.word	0x00000674
	{
		case '0':
			return 0x3F;
 624:	e3a0303f 	mov	r3, #63	; 0x3f
 628:	ea000014 	b	680 <HEX_Lookup+0x128>
		case '1':
			return 0x06;
 62c:	e3a03006 	mov	r3, #6
 630:	ea000012 	b	680 <HEX_Lookup+0x128>
		case '2':
			return 0x5B;
 634:	e3a0305b 	mov	r3, #91	; 0x5b
 638:	ea000010 	b	680 <HEX_Lookup+0x128>
		case '3':
			return 0x4F;
 63c:	e3a0304f 	mov	r3, #79	; 0x4f
 640:	ea00000e 	b	680 <HEX_Lookup+0x128>
		case '4':
			return 0x66;
 644:	e3a03066 	mov	r3, #102	; 0x66
 648:	ea00000c 	b	680 <HEX_Lookup+0x128>
		case '5':
			return 0x6D;
 64c:	e3a0306d 	mov	r3, #109	; 0x6d
 650:	ea00000a 	b	680 <HEX_Lookup+0x128>
		case '6':
			return 0x7D;
 654:	e3a0307d 	mov	r3, #125	; 0x7d
 658:	ea000008 	b	680 <HEX_Lookup+0x128>
		case '7':
			return 0x07;
 65c:	e3a03007 	mov	r3, #7
 660:	ea000006 	b	680 <HEX_Lookup+0x128>
		case '8':
			return 0x7F;
 664:	e3a0307f 	mov	r3, #127	; 0x7f
 668:	ea000004 	b	680 <HEX_Lookup+0x128>
		case '9':
			return 0x6F;
 66c:	e3a0306f 	mov	r3, #111	; 0x6f
 670:	ea000002 	b	680 <HEX_Lookup+0x128>
		case 'X':
			return 0x00;
 674:	e3a03000 	mov	r3, #0
 678:	ea000000 	b	680 <HEX_Lookup+0x128>
	}
	return 0x00;	
 67c:	e3a03000 	mov	r3, #0
}
 680:	e1a00003 	mov	r0, r3
 684:	e28bd000 	add	sp, r11, #0
 688:	e8bd0800 	ldmfd	sp!, {r11}
 68c:	e12fff1e 	bx	lr

00000690 <config_clock>:

void config_clock() //Configure clock to interrupt every millisecond
{
 690:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 694:	e28db000 	add	r11, sp, #0
	*TMR_LOAD_ptr = 200000;
 698:	e3003f50 	movw	r3, #3920	; 0xf50
 69c:	e3403000 	movt	r3, #0
 6a0:	e5932000 	ldr	r2, [r3]
 6a4:	e3a03d35 	mov	r3, #3392	; 0xd40
 6a8:	e3403003 	movt	r3, #3
 6ac:	e5823000 	str	r3, [r2]
	*TMR_CRNT_ptr = 200000;
 6b0:	e3003f54 	movw	r3, #3924	; 0xf54
 6b4:	e3403000 	movt	r3, #0
 6b8:	e5932000 	ldr	r2, [r3]
 6bc:	e3a03d35 	mov	r3, #3392	; 0xd40
 6c0:	e3403003 	movt	r3, #3
 6c4:	e5823000 	str	r3, [r2]
	*TMR_CTRL_ptr = 0x6; //Set timer to not be enabled, load values, auto-reload, allow interrupt
 6c8:	e3003f58 	movw	r3, #3928	; 0xf58
 6cc:	e3403000 	movt	r3, #0
 6d0:	e5933000 	ldr	r3, [r3]
 6d4:	e3a02006 	mov	r2, #6
 6d8:	e5832000 	str	r2, [r3]
	*TMR_FLAG_ptr = 0x1; //Clear Timer0 flag
 6dc:	e3003f5c 	movw	r3, #3932	; 0xf5c
 6e0:	e3403000 	movt	r3, #0
 6e4:	e5933000 	ldr	r3, [r3]
 6e8:	e3a02001 	mov	r2, #1
 6ec:	e5832000 	str	r2, [r3]
 6f0:	e28bd000 	add	sp, r11, #0
 6f4:	e8bd0800 	ldmfd	sp!, {r11}
 6f8:	e12fff1e 	bx	lr

000006fc <__cs3_isr_irq>:
void config_interrupt (int, int);


// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
 6fc:	e24ee004 	sub	lr, lr, #4
 700:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
 704:	e28db018 	add	r11, sp, #24
 708:	e24dd00c 	sub	sp, sp, #12
	// Read the ICCIAR from the CPU interface in the GIC
	int address;
	int interrupt_ID;
	
	address = MPCORE_GIC_CPUIF + ICCIAR;
 70c:	e30c310c 	movw	r3, #49420	; 0xc10c
 710:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 714:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	interrupt_ID = *(int *)address;
 718:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 71c:	e5933000 	ldr	r3, [r3]
 720:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
   
	clock_ISR (); //Do the ISR 
 724:	eb000086 	bl	944 <clock_ISR>

	// Write to the End of Interrupt Register (ICCEOIR)
	address = MPCORE_GIC_CPUIF + ICCEOIR;
 728:	e30c3110 	movw	r3, #49424	; 0xc110
 72c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 730:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	*(int *)address = interrupt_ID;
 734:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 738:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
 73c:	e5832000 	str	r2, [r3]

	return;
 740:	e1a00000 	nop			; (mov r0, r0)
} 
 744:	e24bd018 	sub	sp, r11, #24
 748:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

0000074c <__cs3_reset>:

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
 74c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 750:	e28db000 	add	r11, sp, #0
    while(1);
 754:	eafffffe 	b	754 <__cs3_reset+0x8>

00000758 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
 758:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 75c:	e28db000 	add	r11, sp, #0
    while(1);
 760:	eafffffe 	b	760 <__cs3_isr_undef+0x8>

00000764 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
 764:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 768:	e28db000 	add	r11, sp, #0
    while(1);
 76c:	eafffffe 	b	76c <__cs3_isr_swi+0x8>

00000770 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
 770:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 774:	e28db000 	add	r11, sp, #0
    while(1);
 778:	eafffffe 	b	778 <__cs3_isr_pabort+0x8>

0000077c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
 77c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 780:	e28db000 	add	r11, sp, #0
    while(1);
 784:	eafffffe 	b	784 <__cs3_isr_dabort+0x8>

00000788 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
 788:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 78c:	e28db000 	add	r11, sp, #0
    while(1);
 790:	eafffffe 	b	790 <__cs3_isr_fiq+0x8>

00000794 <disable_A9_interrupts>:

/* 
 * Turn off interrupts in the ARM processor
*/
void disable_A9_interrupts(void)
{
 794:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 798:	e28db000 	add	r11, sp, #0
 79c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
 7a0:	e3a030d3 	mov	r3, #211	; 0xd3
 7a4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 7a8:	e51b3008 	ldr	r3, [r11, #-8]
 7ac:	e129f003 	msr	CPSR_fc, r3
}
 7b0:	e28bd000 	add	sp, r11, #0
 7b4:	e8bd0800 	ldmfd	sp!, {r11}
 7b8:	e12fff1e 	bx	lr

000007bc <set_A9_IRQ_stack>:

/* 
 * Initialize the banked stack pointer register for IRQ mode
*/
void set_A9_IRQ_stack(void)
{
 7bc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 7c0:	e28db000 	add	r11, sp, #0
 7c4:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
 7c8:	e3e03007 	mvn	r3, #7
 7cc:	e50b3008 	str	r3, [r11, #-8]
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
 7d0:	e3a030d2 	mov	r3, #210	; 0xd2
 7d4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 7d8:	e51b300c 	ldr	r3, [r11, #-12]
 7dc:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
 7e0:	e51b3008 	ldr	r3, [r11, #-8]
 7e4:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
 7e8:	e3a030d3 	mov	r3, #211	; 0xd3
 7ec:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 7f0:	e51b300c 	ldr	r3, [r11, #-12]
 7f4:	e129f003 	msr	CPSR_fc, r3
}
 7f8:	e28bd000 	add	sp, r11, #0
 7fc:	e8bd0800 	ldmfd	sp!, {r11}
 800:	e12fff1e 	bx	lr

00000804 <enable_A9_interrupts>:

/* 
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
 804:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 808:	e28db000 	add	r11, sp, #0
 80c:	e24dd00c 	sub	sp, sp, #12
	int status = SVC_MODE | INT_ENABLE;
 810:	e3a03053 	mov	r3, #83	; 0x53
 814:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 818:	e51b3008 	ldr	r3, [r11, #-8]
 81c:	e129f003 	msr	CPSR_fc, r3
}
 820:	e28bd000 	add	sp, r11, #0
 824:	e8bd0800 	ldmfd	sp!, {r11}
 828:	e12fff1e 	bx	lr

0000082c <config_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
 82c:	e92d4800 	push	{r11, lr}
 830:	e28db004 	add	r11, sp, #4
 834:	e24dd008 	sub	sp, sp, #8
	int address;
	config_interrupt (29, CPU0);    // configure the FPGA A9 Timer interrupt
 838:	e3a0001d 	mov	r0, #29
 83c:	e3a01001 	mov	r1, #1
 840:	eb000013 	bl	894 <config_interrupt>

  	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
	address = MPCORE_GIC_CPUIF + ICCPMR;
 844:	e30c3104 	movw	r3, #49412	; 0xc104
 848:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 84c:	e50b3008 	str	r3, [r11, #-8]
  	*(int *) address = 0xFFFF;       
 850:	e51b3008 	ldr	r3, [r11, #-8]
 854:	e30f2fff 	movw	r2, #65535	; 0xffff
 858:	e5832000 	str	r2, [r3]

  	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	address = MPCORE_GIC_CPUIF + ICCICR;
 85c:	e3a03cc1 	mov	r3, #49408	; 0xc100
 860:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 864:	e50b3008 	str	r3, [r11, #-8]
  	*(int *) address = 1;       
 868:	e51b3008 	ldr	r3, [r11, #-8]
 86c:	e3a02001 	mov	r2, #1
 870:	e5832000 	str	r2, [r3]

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
	address = MPCORE_GIC_DIST + ICDDCR;
 874:	e3a03a0d 	mov	r3, #53248	; 0xd000
 878:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 87c:	e50b3008 	str	r3, [r11, #-8]
  	*(int *) address = 1;          
 880:	e51b3008 	ldr	r3, [r11, #-8]
 884:	e3a02001 	mov	r2, #1
 888:	e5832000 	str	r2, [r3]
}
 88c:	e24bd004 	sub	sp, r11, #4
 890:	e8bd8800 	pop	{r11, pc}

00000894 <config_interrupt>:
 * We configure only the Interrupt Set Enable Registers (ICDISERn) and Interrupt 
 * Processor Target Registers (ICDIPTRn). The default (reset) values are used for 
 * other registers in the GIC
*/
void config_interrupt (int N, int CPU_target)
{
 894:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 898:	e28db000 	add	r11, sp, #0
 89c:	e24dd01c 	sub	sp, sp, #28
 8a0:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
 8a4:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset, index, value, address;
    
	/* Configure the Interrupt Set-Enable Registers (ICDISERn). 
	 * reg_offset = (integer_div(N / 32) * 4
	 * value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC; 
 8a8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 8ac:	e1a031c3 	asr	r3, r3, #3
 8b0:	e3c33003 	bic	r3, r3, #3
 8b4:	e50b3008 	str	r3, [r11, #-8]
	index = N & 0x1F;
 8b8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 8bc:	e203301f 	and	r3, r3, #31
 8c0:	e50b300c 	str	r3, [r11, #-12]
	value = 0x1 << index;
 8c4:	e3a02001 	mov	r2, #1
 8c8:	e51b300c 	ldr	r3, [r11, #-12]
 8cc:	e1a03312 	lsl	r3, r2, r3
 8d0:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
 8d4:	e51b3008 	ldr	r3, [r11, #-8]
 8d8:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
 8dc:	e2433c03 	sub	r3, r3, #768	; 0x300
 8e0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	/* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
 8e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 8e8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 8ec:	e5921000 	ldr	r1, [r2]
 8f0:	e51b2010 	ldr	r2, [r11, #-16]
 8f4:	e1812002 	orr	r2, r1, r2
 8f8:	e5832000 	str	r2, [r3]

	/* Configure the Interrupt Processor Targets Register (ICDIPTRn)
	 * reg_offset = integer_div(N / 4) * 4
	 * index = N mod 4 */
	reg_offset = (N & 0xFFFFFFFC);
 8fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 900:	e3c33003 	bic	r3, r3, #3
 904:	e50b3008 	str	r3, [r11, #-8]
	index = N & 0x3;
 908:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 90c:	e2033003 	and	r3, r3, #3
 910:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
 914:	e51b2008 	ldr	r2, [r11, #-8]
 918:	e51b300c 	ldr	r3, [r11, #-12]
 91c:	e0823003 	add	r3, r2, r3
 920:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
 924:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	/* Now that we know the register address and value, write to (only) the appropriate byte */
	*(char *)address = (char) CPU_target;
 928:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 92c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
 930:	e6ef2072 	uxtb	r2, r2
 934:	e5c32000 	strb	r2, [r3]
}
 938:	e28bd000 	add	sp, r11, #0
 93c:	e8bd0800 	ldmfd	sp!, {r11}
 940:	e12fff1e 	bx	lr

00000944 <clock_ISR>:
 * Clock - Interrupt Service Routine                                
 *                                                                          
 * Sets a flag when the timer triggers
 ***************************************************************************************/
void clock_ISR( void )
{
 944:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 948:	e28db000 	add	r11, sp, #0
	*TMR_FLAG_ptr = 0x1; //Clear Timer0 flag
 94c:	e3003f5c 	movw	r3, #3932	; 0xf5c
 950:	e3403000 	movt	r3, #0
 954:	e5933000 	ldr	r3, [r3]
 958:	e3a02001 	mov	r2, #1
 95c:	e5832000 	str	r2, [r3]
	flag = 1;
 960:	e30133c4 	movw	r3, #5060	; 0x13c4
 964:	e3403000 	movt	r3, #0
 968:	e3a02001 	mov	r2, #1
 96c:	e5832000 	str	r2, [r3]
	return;
 970:	e1a00000 	nop			; (mov r0, r0)
}
 974:	e28bd000 	add	sp, r11, #0
 978:	e8bd0800 	ldmfd	sp!, {r11}
 97c:	e12fff1e 	bx	lr

00000980 <__aeabi_idiv>:
 980:	e3510000 	cmp	r1, #0
 984:	0a000043 	beq	a98 <.divsi3_skip_div0_test+0x110>

00000988 <.divsi3_skip_div0_test>:
 988:	e020c001 	eor	r12, r0, r1
 98c:	42611000 	rsbmi	r1, r1, #0
 990:	e2512001 	subs	r2, r1, #1
 994:	0a000027 	beq	a38 <.divsi3_skip_div0_test+0xb0>
 998:	e1b03000 	movs	r3, r0
 99c:	42603000 	rsbmi	r3, r0, #0
 9a0:	e1530001 	cmp	r3, r1
 9a4:	9a000026 	bls	a44 <.divsi3_skip_div0_test+0xbc>
 9a8:	e1110002 	tst	r1, r2
 9ac:	0a000028 	beq	a54 <.divsi3_skip_div0_test+0xcc>
 9b0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 9b4:	01a01181 	lsleq	r1, r1, #3
 9b8:	03a02008 	moveq	r2, #8
 9bc:	13a02001 	movne	r2, #1
 9c0:	e3510201 	cmp	r1, #268435456	; 0x10000000
 9c4:	31510003 	cmpcc	r1, r3
 9c8:	31a01201 	lslcc	r1, r1, #4
 9cc:	31a02202 	lslcc	r2, r2, #4
 9d0:	3afffffa 	bcc	9c0 <.divsi3_skip_div0_test+0x38>
 9d4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 9d8:	31510003 	cmpcc	r1, r3
 9dc:	31a01081 	lslcc	r1, r1, #1
 9e0:	31a02082 	lslcc	r2, r2, #1
 9e4:	3afffffa 	bcc	9d4 <.divsi3_skip_div0_test+0x4c>
 9e8:	e3a00000 	mov	r0, #0
 9ec:	e1530001 	cmp	r3, r1
 9f0:	20433001 	subcs	r3, r3, r1
 9f4:	21800002 	orrcs	r0, r0, r2
 9f8:	e15300a1 	cmp	r3, r1, lsr #1
 9fc:	204330a1 	subcs	r3, r3, r1, lsr #1
 a00:	218000a2 	orrcs	r0, r0, r2, lsr #1
 a04:	e1530121 	cmp	r3, r1, lsr #2
 a08:	20433121 	subcs	r3, r3, r1, lsr #2
 a0c:	21800122 	orrcs	r0, r0, r2, lsr #2
 a10:	e15301a1 	cmp	r3, r1, lsr #3
 a14:	204331a1 	subcs	r3, r3, r1, lsr #3
 a18:	218001a2 	orrcs	r0, r0, r2, lsr #3
 a1c:	e3530000 	cmp	r3, #0
 a20:	11b02222 	lsrsne	r2, r2, #4
 a24:	11a01221 	lsrne	r1, r1, #4
 a28:	1affffef 	bne	9ec <.divsi3_skip_div0_test+0x64>
 a2c:	e35c0000 	cmp	r12, #0
 a30:	42600000 	rsbmi	r0, r0, #0
 a34:	e12fff1e 	bx	lr
 a38:	e13c0000 	teq	r12, r0
 a3c:	42600000 	rsbmi	r0, r0, #0
 a40:	e12fff1e 	bx	lr
 a44:	33a00000 	movcc	r0, #0
 a48:	01a00fcc 	asreq	r0, r12, #31
 a4c:	03800001 	orreq	r0, r0, #1
 a50:	e12fff1e 	bx	lr
 a54:	e3510801 	cmp	r1, #65536	; 0x10000
 a58:	21a01821 	lsrcs	r1, r1, #16
 a5c:	23a02010 	movcs	r2, #16
 a60:	33a02000 	movcc	r2, #0
 a64:	e3510c01 	cmp	r1, #256	; 0x100
 a68:	21a01421 	lsrcs	r1, r1, #8
 a6c:	22822008 	addcs	r2, r2, #8
 a70:	e3510010 	cmp	r1, #16
 a74:	21a01221 	lsrcs	r1, r1, #4
 a78:	22822004 	addcs	r2, r2, #4
 a7c:	e3510004 	cmp	r1, #4
 a80:	82822003 	addhi	r2, r2, #3
 a84:	908220a1 	addls	r2, r2, r1, lsr #1
 a88:	e35c0000 	cmp	r12, #0
 a8c:	e1a00233 	lsr	r0, r3, r2
 a90:	42600000 	rsbmi	r0, r0, #0
 a94:	e12fff1e 	bx	lr
 a98:	e3500000 	cmp	r0, #0
 a9c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 aa0:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 aa4:	ea000007 	b	ac8 <__aeabi_idiv0>

00000aa8 <__aeabi_idivmod>:
 aa8:	e3510000 	cmp	r1, #0
 aac:	0afffff9 	beq	a98 <.divsi3_skip_div0_test+0x110>
 ab0:	e92d4003 	push	{r0, r1, lr}
 ab4:	ebffffb3 	bl	988 <.divsi3_skip_div0_test>
 ab8:	e8bd4006 	pop	{r1, r2, lr}
 abc:	e0030092 	mul	r3, r2, r0
 ac0:	e0411003 	sub	r1, r1, r3
 ac4:	e12fff1e 	bx	lr

00000ac8 <__aeabi_idiv0>:
 ac8:	e12fff1e 	bx	lr

00000acc <atexit>:
 acc:	e1a01000 	mov	r1, r0
 ad0:	e3a00000 	mov	r0, #0
 ad4:	e92d4008 	push	{r3, lr}
 ad8:	e1a02000 	mov	r2, r0
 adc:	e1a03000 	mov	r3, r0
 ae0:	eb00000e 	bl	b20 <__register_exitproc>
 ae4:	e8bd4008 	pop	{r3, lr}
 ae8:	e12fff1e 	bx	lr

00000aec <exit>:
 aec:	e92d4008 	push	{r3, lr}
 af0:	e3a01000 	mov	r1, #0
 af4:	e1a04000 	mov	r4, r0
 af8:	eb000045 	bl	c14 <__call_exitprocs>
 afc:	e59f3018 	ldr	r3, [pc, #24]	; b1c <exit+0x30>
 b00:	e5930000 	ldr	r0, [r3]
 b04:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 b08:	e3530000 	cmp	r3, #0
 b0c:	11a0e00f 	movne	lr, pc
 b10:	112fff13 	bxne	r3
 b14:	e1a00004 	mov	r0, r4
 b18:	eb0000c9 	bl	e44 <_exit>
 b1c:	00000eec 	.word	0x00000eec

00000b20 <__register_exitproc>:
 b20:	e59fc0e4 	ldr	r12, [pc, #228]	; c0c <__register_exitproc+0xec>
 b24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 b28:	e59c4000 	ldr	r4, [r12]
 b2c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 b30:	e35c0000 	cmp	r12, #0
 b34:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 b38:	e59c5004 	ldr	r5, [r12, #4]
 b3c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 b40:	e355001f 	cmp	r5, #31
 b44:	e24dd010 	sub	sp, sp, #16
 b48:	e1a06000 	mov	r6, r0
 b4c:	da000015 	ble	ba8 <__register_exitproc+0x88>
 b50:	e59f00b8 	ldr	r0, [pc, #184]	; c10 <__register_exitproc+0xf0>
 b54:	e3500000 	cmp	r0, #0
 b58:	1a000001 	bne	b64 <__register_exitproc+0x44>
 b5c:	e3e00000 	mvn	r0, #0
 b60:	ea000018 	b	bc8 <__register_exitproc+0xa8>
 b64:	e3a00e19 	mov	r0, #400	; 0x190
 b68:	e58d100c 	str	r1, [sp, #12]
 b6c:	e58d2008 	str	r2, [sp, #8]
 b70:	e58d3004 	str	r3, [sp, #4]
 b74:	e320f000 	nop	{0}
 b78:	e250c000 	subs	r12, r0, #0
 b7c:	e59d100c 	ldr	r1, [sp, #12]
 b80:	e59d2008 	ldr	r2, [sp, #8]
 b84:	e59d3004 	ldr	r3, [sp, #4]
 b88:	0afffff3 	beq	b5c <__register_exitproc+0x3c>
 b8c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 b90:	e3a00000 	mov	r0, #0
 b94:	e58c0004 	str	r0, [r12, #4]
 b98:	e58c5000 	str	r5, [r12]
 b9c:	e584c148 	str	r12, [r4, #328]	; 0x148
 ba0:	e58c0188 	str	r0, [r12, #392]	; 0x188
 ba4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 ba8:	e3560000 	cmp	r6, #0
 bac:	e59c4004 	ldr	r4, [r12, #4]
 bb0:	1a000007 	bne	bd4 <__register_exitproc+0xb4>
 bb4:	e2843002 	add	r3, r4, #2
 bb8:	e2844001 	add	r4, r4, #1
 bbc:	e78c1103 	str	r1, [r12, r3, lsl #2]
 bc0:	e58c4004 	str	r4, [r12, #4]
 bc4:	e3a00000 	mov	r0, #0
 bc8:	e28dd010 	add	sp, sp, #16
 bcc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 bd0:	e12fff1e 	bx	lr
 bd4:	e3a00001 	mov	r0, #1
 bd8:	e1a00410 	lsl	r0, r0, r4
 bdc:	e08c8104 	add	r8, r12, r4, lsl #2
 be0:	e3560002 	cmp	r6, #2
 be4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 be8:	e5883108 	str	r3, [r8, #264]	; 0x108
 bec:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 bf0:	e1877000 	orr	r7, r7, r0
 bf4:	01830000 	orreq	r0, r3, r0
 bf8:	e1a05008 	mov	r5, r8
 bfc:	e5882088 	str	r2, [r8, #136]	; 0x88
 c00:	e58c7188 	str	r7, [r12, #392]	; 0x188
 c04:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 c08:	eaffffe9 	b	bb4 <__register_exitproc+0x94>
 c0c:	00000eec 	.word	0x00000eec
 c10:	00000000 	.word	0x00000000

00000c14 <__call_exitprocs>:
 c14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c18:	e59f3168 	ldr	r3, [pc, #360]	; d88 <__call_exitprocs+0x174>
 c1c:	e5933000 	ldr	r3, [r3]
 c20:	e24dd014 	sub	sp, sp, #20
 c24:	e58d3004 	str	r3, [sp, #4]
 c28:	e2833f52 	add	r3, r3, #328	; 0x148
 c2c:	e58d0008 	str	r0, [sp, #8]
 c30:	e58d300c 	str	r3, [sp, #12]
 c34:	e1a07001 	mov	r7, r1
 c38:	e3a08001 	mov	r8, #1
 c3c:	e59d3004 	ldr	r3, [sp, #4]
 c40:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 c44:	e3560000 	cmp	r6, #0
 c48:	e59db00c 	ldr	r11, [sp, #12]
 c4c:	0a000033 	beq	d20 <__call_exitprocs+0x10c>
 c50:	e5965004 	ldr	r5, [r6, #4]
 c54:	e2554001 	subs	r4, r5, #1
 c58:	5286a088 	addpl	r10, r6, #136	; 0x88
 c5c:	5285501f 	addpl	r5, r5, #31
 c60:	508a5105 	addpl	r5, r10, r5, lsl #2
 c64:	5a000007 	bpl	c88 <__call_exitprocs+0x74>
 c68:	ea000029 	b	d14 <__call_exitprocs+0x100>
 c6c:	e5953000 	ldr	r3, [r5]
 c70:	e1530007 	cmp	r3, r7
 c74:	0a000005 	beq	c90 <__call_exitprocs+0x7c>
 c78:	e2444001 	sub	r4, r4, #1
 c7c:	e3740001 	cmn	r4, #1
 c80:	e2455004 	sub	r5, r5, #4
 c84:	0a000022 	beq	d14 <__call_exitprocs+0x100>
 c88:	e3570000 	cmp	r7, #0
 c8c:	1afffff6 	bne	c6c <__call_exitprocs+0x58>
 c90:	e5963004 	ldr	r3, [r6, #4]
 c94:	e06a2005 	rsb	r2, r10, r5
 c98:	e2433001 	sub	r3, r3, #1
 c9c:	e0862002 	add	r2, r6, r2
 ca0:	e1530004 	cmp	r3, r4
 ca4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 ca8:	13a01000 	movne	r1, #0
 cac:	05864004 	streq	r4, [r6, #4]
 cb0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 cb4:	e3530000 	cmp	r3, #0
 cb8:	0affffee 	beq	c78 <__call_exitprocs+0x64>
 cbc:	e1a02418 	lsl	r2, r8, r4
 cc0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 cc4:	e1120001 	tst	r2, r1
 cc8:	e5969004 	ldr	r9, [r6, #4]
 ccc:	0a000016 	beq	d2c <__call_exitprocs+0x118>
 cd0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 cd4:	e1120001 	tst	r2, r1
 cd8:	1a000016 	bne	d38 <__call_exitprocs+0x124>
 cdc:	e59d0008 	ldr	r0, [sp, #8]
 ce0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 ce4:	e1a0e00f 	mov	lr, pc
 ce8:	e12fff13 	bx	r3
 cec:	e5963004 	ldr	r3, [r6, #4]
 cf0:	e1530009 	cmp	r3, r9
 cf4:	1affffd0 	bne	c3c <__call_exitprocs+0x28>
 cf8:	e59b3000 	ldr	r3, [r11]
 cfc:	e1530006 	cmp	r3, r6
 d00:	1affffcd 	bne	c3c <__call_exitprocs+0x28>
 d04:	e2444001 	sub	r4, r4, #1
 d08:	e3740001 	cmn	r4, #1
 d0c:	e2455004 	sub	r5, r5, #4
 d10:	1affffdc 	bne	c88 <__call_exitprocs+0x74>
 d14:	e59f1070 	ldr	r1, [pc, #112]	; d8c <__call_exitprocs+0x178>
 d18:	e3510000 	cmp	r1, #0
 d1c:	1a000009 	bne	d48 <__call_exitprocs+0x134>
 d20:	e28dd014 	add	sp, sp, #20
 d24:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 d28:	e12fff1e 	bx	lr
 d2c:	e1a0e00f 	mov	lr, pc
 d30:	e12fff13 	bx	r3
 d34:	eaffffec 	b	cec <__call_exitprocs+0xd8>
 d38:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 d3c:	e1a0e00f 	mov	lr, pc
 d40:	e12fff13 	bx	r3
 d44:	eaffffe8 	b	cec <__call_exitprocs+0xd8>
 d48:	e5963004 	ldr	r3, [r6, #4]
 d4c:	e3530000 	cmp	r3, #0
 d50:	e5963000 	ldr	r3, [r6]
 d54:	1a000008 	bne	d7c <__call_exitprocs+0x168>
 d58:	e3530000 	cmp	r3, #0
 d5c:	0a000006 	beq	d7c <__call_exitprocs+0x168>
 d60:	e1a00006 	mov	r0, r6
 d64:	e58b3000 	str	r3, [r11]
 d68:	e320f000 	nop	{0}
 d6c:	e59b6000 	ldr	r6, [r11]
 d70:	e3560000 	cmp	r6, #0
 d74:	1affffb5 	bne	c50 <__call_exitprocs+0x3c>
 d78:	eaffffe8 	b	d20 <__call_exitprocs+0x10c>
 d7c:	e1a0b006 	mov	r11, r6
 d80:	e1a06003 	mov	r6, r3
 d84:	eafffff9 	b	d70 <__call_exitprocs+0x15c>
 d88:	00000eec 	.word	0x00000eec
 d8c:	00000000 	.word	0x00000000

00000d90 <register_fini>:
 d90:	e92d4008 	push	{r3, lr}
 d94:	e59f3010 	ldr	r3, [pc, #16]	; dac <register_fini+0x1c>
 d98:	e3530000 	cmp	r3, #0
 d9c:	159f000c 	ldrne	r0, [pc, #12]	; db0 <register_fini+0x20>
 da0:	1bffff49 	blne	acc <atexit>
 da4:	e8bd4008 	pop	{r3, lr}
 da8:	e12fff1e 	bx	lr
 dac:	00000f14 	.word	0x00000f14
 db0:	00000db4 	.word	0x00000db4

00000db4 <__libc_fini_array>:
 db4:	e92d4038 	push	{r3, r4, r5, lr}
 db8:	e59f5030 	ldr	r5, [pc, #48]	; df0 <__libc_fini_array+0x3c>
 dbc:	e59f4030 	ldr	r4, [pc, #48]	; df4 <__libc_fini_array+0x40>
 dc0:	e0654004 	rsb	r4, r5, r4
 dc4:	e1b04144 	asrs	r4, r4, #2
 dc8:	10855104 	addne	r5, r5, r4, lsl #2
 dcc:	0a000004 	beq	de4 <__libc_fini_array+0x30>
 dd0:	e5353004 	ldr	r3, [r5, #-4]!
 dd4:	e1a0e00f 	mov	lr, pc
 dd8:	e12fff13 	bx	r3
 ddc:	e2544001 	subs	r4, r4, #1
 de0:	1afffffa 	bne	dd0 <__libc_fini_array+0x1c>
 de4:	eb00004a 	bl	f14 <__libc_fini>
 de8:	e8bd4038 	pop	{r3, r4, r5, lr}
 dec:	e12fff1e 	bx	lr
 df0:	00000f2c 	.word	0x00000f2c
 df4:	00000f30 	.word	0x00000f30

00000df8 <__cs3_premain>:
 df8:	e92d4008 	push	{r3, lr}
 dfc:	eb000017 	bl	e60 <__libc_init_array>
 e00:	e59f3030 	ldr	r3, [pc, #48]	; e38 <__cs3_premain+0x40>
 e04:	e3530000 	cmp	r3, #0
 e08:	15930000 	ldrne	r0, [r3]
 e0c:	01a00003 	moveq	r0, r3
 e10:	e59f3024 	ldr	r3, [pc, #36]	; e3c <__cs3_premain+0x44>
 e14:	e3530000 	cmp	r3, #0
 e18:	15931000 	ldrne	r1, [r3]
 e1c:	01a01003 	moveq	r1, r3
 e20:	e3a02000 	mov	r2, #0
 e24:	ebfffd0c 	bl	25c <main>
 e28:	e59f3010 	ldr	r3, [pc, #16]	; e40 <__cs3_premain+0x48>
 e2c:	e3530000 	cmp	r3, #0
 e30:	1bffff2d 	blne	aec <exit>
 e34:	eafffffe 	b	e34 <__cs3_premain+0x3c>
	...
 e40:	00000aec 	.word	0x00000aec

00000e44 <_exit>:
 e44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 e48:	e3a00018 	mov	r0, #24
 e4c:	e59f1004 	ldr	r1, [pc, #4]	; e58 <_exit+0x14>
 e50:	ef123456 	svc	0x00123456
 e54:	eafffffe 	b	e54 <_exit+0x10>
 e58:	00020026 	.word	0x00020026

00000e5c <__cs3_isr_interrupt>:
 e5c:	eafffffe 	b	e5c <__cs3_isr_interrupt>

00000e60 <__libc_init_array>:
 e60:	e92d4070 	push	{r4, r5, r6, lr}
 e64:	e59f506c 	ldr	r5, [pc, #108]	; ed8 <__libc_init_array+0x78>
 e68:	e59f606c 	ldr	r6, [pc, #108]	; edc <__libc_init_array+0x7c>
 e6c:	e0656006 	rsb	r6, r5, r6
 e70:	e1b06146 	asrs	r6, r6, #2
 e74:	12455004 	subne	r5, r5, #4
 e78:	13a04000 	movne	r4, #0
 e7c:	0a000005 	beq	e98 <__libc_init_array+0x38>
 e80:	e5b53004 	ldr	r3, [r5, #4]!
 e84:	e2844001 	add	r4, r4, #1
 e88:	e1a0e00f 	mov	lr, pc
 e8c:	e12fff13 	bx	r3
 e90:	e1560004 	cmp	r6, r4
 e94:	1afffff9 	bne	e80 <__libc_init_array+0x20>
 e98:	e59f5040 	ldr	r5, [pc, #64]	; ee0 <__libc_init_array+0x80>
 e9c:	e59f6040 	ldr	r6, [pc, #64]	; ee4 <__libc_init_array+0x84>
 ea0:	e0656006 	rsb	r6, r5, r6
 ea4:	eb000012 	bl	ef4 <_init>
 ea8:	e1b06146 	asrs	r6, r6, #2
 eac:	12455004 	subne	r5, r5, #4
 eb0:	13a04000 	movne	r4, #0
 eb4:	0a000005 	beq	ed0 <__libc_init_array+0x70>
 eb8:	e5b53004 	ldr	r3, [r5, #4]!
 ebc:	e2844001 	add	r4, r4, #1
 ec0:	e1a0e00f 	mov	lr, pc
 ec4:	e12fff13 	bx	r3
 ec8:	e1560004 	cmp	r6, r4
 ecc:	1afffff9 	bne	eb8 <__libc_init_array+0x58>
 ed0:	e8bd4070 	pop	{r4, r5, r6, lr}
 ed4:	e12fff1e 	bx	lr
 ed8:	00000f0c 	.word	0x00000f0c
 edc:	00000f0c 	.word	0x00000f0c
 ee0:	00000f0c 	.word	0x00000f0c
 ee4:	00000f14 	.word	0x00000f14

Disassembly of section .rodata:

00000eec <_global_impure_ptr>:
 eec:	00000f78 00000043                       x...C...

00000ef4 <_init>:
 ef4:	e1a0c00d 	mov	r12, sp
 ef8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 efc:	e24cb004 	sub	r11, r12, #4
 f00:	e24bd028 	sub	sp, r11, #40	; 0x28
 f04:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f08:	e12fff1e 	bx	lr

00000f0c <__init_array_start>:
 f0c:	00000d90 	.word	0x00000d90

00000f10 <__frame_dummy_init_array_entry>:
 f10:	00000208                                ....

00000f14 <__libc_fini>:
 f14:	e1a0c00d 	mov	r12, sp
 f18:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f1c:	e24cb004 	sub	r11, r12, #4
 f20:	e24bd028 	sub	sp, r11, #40	; 0x28
 f24:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f28:	e12fff1e 	bx	lr

00000f2c <__fini_array_start>:
 f2c:	000001c4 	.word	0x000001c4

00000f30 <__cs3_regions>:
	...
 f3c:	000013a8 	.word	0x000013a8
 f40:	00000020 	.word	0x00000020

00000f44 <__cs3_regions_end>:
 f44:	00000000 	.word	0x00000000
